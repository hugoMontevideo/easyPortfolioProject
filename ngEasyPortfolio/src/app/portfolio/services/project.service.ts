import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { JWTTokenService } from 'src/app/services/JWTToken.service';
import { environment } from 'src/environments/environment';
import { Project } from '../component/project/project.interface';
import { Observable, catchError, throwError } from 'rxjs';
import { ProjectAddDto } from '../component/project/project-add-dto.interface';
import { DocumentProject } from '../component/project/document-project.interface';

@Injectable()
export class ProjectService {
  ENV_DEV:string = environment.apiUrl;
  ENV_PICT:string = `${environment.apiImg}/pictures/`;

  constructor(
    private http: HttpClient,
    private jwtTokenService : JWTTokenService, 
  ) { }

  getProjects = ( portfolioId:number | any ):Observable<Project[]> => {
    return this.http.get<Project[]>( `${this.ENV_DEV}/portfolios/${portfolioId}/projects`);
  }

  getDocumentProjects = ( projectId: number ):Observable<DocumentProject[]> => {
    return this.http.get<DocumentProject[]>( `${this.ENV_DEV}/projects/${projectId}/documents`);
  }
  
  saveProject = ( newProject: Project, selectedFile: File | null ): Observable<any> => {     
    const defaultDate = new Date("1970-01-02"); 
    // The dates are of type Date in Angular and of type LocalDate in Java 
    const formData = new FormData;
    if(newProject.date == null ){
      formData.append('date', new Date("1970-01-01").toLocaleDateString()); // date generated by the app (1970-01-01)
    }else if ( newProject.date < defaultDate){        
      formData.append('date', newProject.date.toLocaleDateString()); // date generated by the app (1970-01-01)
    }else{
      formData.append('date', newProject.date.toString());  // date send by the form
    }
    if(this.isFile(selectedFile)){
      formData.append('file', selectedFile as File) ;
    }; 
    formData.append('title', newProject.title);
    formData.append('description', newProject.description);
    formData.append('fileName', newProject.fileName);
    if(newProject.portfolioId != undefined){
      formData.append('portfolioId', newProject.portfolioId.toString());
    }
    formData.append('id', newProject.id.toString());
    return this.http.put( `${this.ENV_DEV}/projects/${newProject.id}`, formData )
      .pipe(catchError(this.handleError)); // catch validator errors
  }

  public add = ( newProject: Project ): Observable<any> => { 
    let projectAdd : ProjectAddDto = {
      title: "nouveau projet en cours",
      portfolioId: newProject.portfolioId
    }
      return this.http.post(`${this.ENV_DEV}/projects`, projectAdd )
        .pipe(catchError(this.handleError)); // catch validator error
  }

  deleteProject = ( projectId: number): Observable<any> | any => {
      return this.http.delete(`${this.ENV_DEV}/projects/${projectId}` );  
  }
  
  // DOCUMENTS  **************************
  deleteDocument = ( projectId:number, documentId: number): Observable<any> | any => {
    return this.http.delete(`${this.ENV_DEV}/projects/${projectId}/documents/${documentId}` );  
  }
  // UTILS  **************************

  public resetNewProject = ( portfolioId: number|any): Project => {
    return {
              id:-1,
              title: "",
              description: "",
              date: new Date("1970-01-01"),
              fileName: "",
              documents:[],
              portfolioId: portfolioId
            };
  }

  private handleError = (error: HttpErrorResponse):Observable<never> => {
    return throwError(()=>error);
  }

  isFile = (file: File | null ): boolean => {
    if(file !== null){
      // this.currentFile = file;
      return true;
    }  
    return false                                                                                                                                                                                                                                                                                                                                                                                              ;
  }

}

  // mapNewProject = ( project : ProjectModel ):Project => {
  //   const mappedProject : Project = {
  //     id: project.id,
  //     title: project.title,
  //     description: project.description,
  //     date: project.date,
  //     fileName:project.fileName,
  //     documents: project.documents,
  //     portfolioId: this.portfolioId
  //   }
  //   return mappedProject;
  // }

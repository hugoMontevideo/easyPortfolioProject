   
   
     public boolean deleteSkill(Long id) {
        try {
            skillRepository.deleteById(id);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
   
    public EducationServiceResponseModel updateEducation(EducationServiceRequestUpdateModel educationServiceModel) {
        //getting the portfolioRepositoryModel
        Optional<PortfolioRepositoryModel> portfolio =
                portfolioRepository.findById( educationServiceModel.getPortfolioId().get() );
        PortfolioServiceModel portfolioServiceModel = mapper.portfolioRepositoryToServiceModel(portfolio.get());
        // adding portfolio manually
        educationServiceModel.setPortfolio(Optional.ofNullable(portfolioServiceModel));
        Optional<LocalDate> noDate = Optional.empty();
        if(educationServiceModel.getStartDate().isPresent()){
            if(!isValidDate(educationServiceModel.getStartDate().get())){
                educationServiceModel.setStartDate(noDate);
            }
        }
        if(educationServiceModel.getEndDate().isPresent()){
            if(!isValidDate(educationServiceModel.getEndDate().get())){
                educationServiceModel.setEndDate(noDate);
            }
        }

        EducationRepositoryModel education = mapper.educationServiceRequestToRepositoryModel(educationServiceModel);
        EducationRepositoryModel addedEducation = educationRepository.save(education);
        return mapper.educationRepositoryToResponseSvc(addedEducation);
    }
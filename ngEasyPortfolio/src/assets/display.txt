   
   
     public boolean deleteSkill(Long id) {
        try {
            skillRepository.deleteById(id);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
   
   
   
   
   
   
   public ProjectServiceResponseModel updateProject1(ProjectServiceRequestUpdateModel projectModel) {
        
        //getting the portfolioRepositoryModel
        Optional<PortfolioRepositoryModel> portfolio =
                portfolioRepository.findById( projectModel.getPortfolioId().get() );
        PortfolioServiceModel portfolioServiceModel = mapper.portfolioRepositoryToServiceModel(portfolio.get());
        // adding portfolio manually
        projectModel.setPortfolio(Optional.ofNullable(portfolioServiceModel));
        ProjectRepositoryModel project = mapper.projectServiceRequestToRepositoryModel(projectModel);
        // verifing date - if date == 1970 01 01 we set it to empty
        if(!isValidDate(projectModel.getDate().get())){
            Optional<LocalDate> noDate = Optional.empty();
            projectModel.setDate(noDate);
        }

        ProjectRepositoryModel addedProject = projectRepository.save(project);
        return mapper.projectRepositoryToResponseSvc(addedProject);
    }